{
  "hash": "c26271ae1b82726c42a5c41c919070d5",
  "result": {
    "markdown": "---\ntitle: \"TidyTuesday: Weather Forecast Accuracy analysis\"\ndate: today \nauthor:\n  - name: Deepsha Menghani \n    url: https://github.com/deepshamenghani\ntitle-block-banner: true\nformat:\n  html:\n    theme: flatly\n    code-fold: false\n    code-tools: true\n    toc: false\n    number-sections: true\nlink-citations: yes\nserver: shiny\n---\n\n\n\n\nIn this post, I will analyse the [#TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/master/) dataset about Weather Forecast Accuracy in the US across all States.\n\nThe data includes 16 months of forecasts and observations from 167 cities, as well as a separate data.frame of information about those cities and some other American cities. You can find the dataset on Tidy Tuesday [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-12-20).\n\n::: callout-tip\nYou can find my github code repository [here](https://github.com/deepshamenghani/tidytuesday/tree/master/2022/Week_51_Weather_forecast_accuracy).\n:::\n\n## Load libraries\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\n# For loading Tidy Tuesday data\nlibrary(tidytuesdayR)\n\n# EDA\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(usmap)\nlibrary(plotly)\n\n# Shiny in md\nlibrary(rmarkdown)\nlibrary(shiny)\n```\n:::\n\n\n## Load data\n\n\n::: {.cell}\n\n:::\n\n\n::: panel-tabset\n### Weather Forcasts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(weather_forecasts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  date       city  state high_…¹ forec…² obser…³ forec…⁴ obser…⁵ forec…⁶ possi…⁷\n  <date>     <chr> <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl> <chr>   <chr>  \n1 2021-01-30 ABIL… TX    high         48      70      NA       0 <NA>    none   \n2 2021-01-30 ABIL… TX    high         36      70      NA       0 <NA>    none   \n3 2021-01-30 ABIL… TX    high         24      70      NA       0 <NA>    none   \n4 2021-01-30 ABIL… TX    high         12      70      70       0 DUST    none   \n5 2021-01-30 ABIL… TX    low          48      42      NA       0 <NA>    none   \n6 2021-01-30 ABIL… TX    low          36      42      NA       0 <NA>    none   \n# … with abbreviated variable names ¹​high_or_low, ²​forecast_hours_before,\n#   ³​observed_temp, ⁴​forecast_temp, ⁵​observed_precip, ⁶​forecast_outlook,\n#   ⁷​possible_error\n```\n:::\n:::\n\n\n### Cities\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n  city   state    lon   lat koppen eleva…¹ dista…²  wind eleva…³ eleva…⁴ avg_a…⁵\n  <chr>  <chr>  <dbl> <dbl> <chr>    <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>\n1 ABILE… TX     -99.7  32.4 Cfa      545.    329.   4.43    66.7    66.7    26.8\n2 AKRON… OH     -81.4  40.9 Dfa      370.    330.   4.28    64.7    64.7    44.7\n3 ALBANY NY     -73.8  42.8 Dfb       85.0    99.8  3.28    79.3    97.4    44.7\n4 ALBUQ… NM    -107.   35.0 BSk     1620.    519.   3.04   112.    147.     10.1\n5 ALLEN… PA     -75.5  40.6 Dfa      118.     48.4  3.34    44.8   144.     52.3\n6 AMARI… TX    -102.   35.2 BSk     1098.    568.   5.14    31.5    72.4    20.2\n# … with abbreviated variable names ¹​elevation, ²​distance_to_coast,\n#   ³​elevation_change_four, ⁴​elevation_change_eight, ⁵​avg_annual_precip\n```\n:::\n:::\n\n\n### Outlook meanings\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  forecast_outlook meaning      \n  <chr>            <chr>        \n1 DUST             Dust         \n2 SUNNY            Sunny        \n3 MOCLDY           Mostly Cloudy\n4 SNOW             Snow         \n5 PTCLDY           Partly Cloudy\n6 RAIN             Rain         \n```\n:::\n:::\n\n:::\n\n## Incorporating Shiny in Quarto markdown\n\nStart with adding the shiny server to the yaml component of the markdown and install the _'rmarkdown'_ package. Below is what the looks like.\n\n\n::: {.cell}\n\n```{.code .cell-code}\n---\ntitle: 'TidyTuesday: Weather Forecast Accuracy analysis'\ndate: today \nauthor:\n  - name: Deepsha Menghani \n    url: https://github.com/deepshamenghani\ntitle-block-banner: true\nformat:\n  html:\n    theme: flatly\n    code-fold: true\n    code-tools: true\n    toc: false\n    number-sections: true\nlink-citations: yes\nserver: shiny\n---\n```\n:::\n\n\nAdd any input components to your shiny app before adding interactivity. Below is what the UI component looks like with an input command and a call to plot the output which will be created within the server. \n\n\n::: {.cell}\n\n```{.code .cell-code}\nselectizeInput(\n    inputId = \"input_weather\",\n    label = h4(\"Cities with most number of days of\"),\n    choices = unique(outlook_meanings$meaning),\n    selected = \"Rain\",\n    multiple = FALSE,\n    options = list(maxItems = 1)\n)\n\nplotlyOutput(outputId = \"weatherplot\")\n```\n:::\n\n\nThe above call to plot the output is generated within the server code. Below is what that looks like.\n\n\n::: {.cell context='server'}\n\n```{.code .cell-code}\nlibrary(tidyverse)\nlibrary(rmarkdown)\nlibrary(plotly)\nlibrary(shiny)\nlibrary(usmap)\n\nweather_forecasts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/weather_forecasts.csv')\ncities <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/cities.csv')\noutlook_meanings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/outlook_meanings.csv')\n\nweather_counts <- eventReactive(\n  eventExpr = input$input_weather,\n  valueExpr = {\n      weather_forecasts %>% \n      filter(forecast_hours_before == 12) %>%\n      left_join(outlook_meanings) %>% \n      filter(meaning == input$input_weather) %>%\n      count(state, city, forecast_outlook) %>% \n      mutate(label = paste0(city,\"\\n\",state, \"\\n\",n)) %>% \n      group_by(state) %>% \n      arrange(desc(n)) %>% \n      filter(row_number() == 1) %>%  \n      ungroup() %>%  \n      left_join(cities %>% select(city,state, lat, lon)) %>%\n      mutate(Region = case_when(state %in% (usmap::.northeast_region) ~ \"Northeast\",\n                                state %in% (usmap::.north_central_region) ~ \"NorthCentral\",\n                                state %in% (usmap::.midwest_region) ~ \"Midwest\",\n                                state %in% (usmap::.south_region) ~ \"South\",\n                                state %in% (usmap::.west_region) ~ \"West\",\n                                TRUE ~ \"Other\")) %>% \n      filter(Region == \"West\") %>%\n      filter(!is.na(lat)) %>% \n      usmap_transform() \n  },\n  ignoreNULL = FALSE\n)\n\noutput$weatherplot <- renderPlotly({\n    g <- plot_usmap(fill = \"#008080\", include = .west_region, alpha = 0.2, color = \"#2c3e50\" ) +\n      geom_point(data = weather_counts(),\n             aes(x = x, y = y, text=label),\n             color = \"darkblue\", alpha = 0.5) +\n      geom_text(data = weather_counts(),\n                            aes(x = x, y = y, label = city),\n                            size = 4, alpha = 0.8) +\n  labs(title = paste0(\"City with most number of days with \", input$input_weather))\n    ggplotly(g, tooltip = \"text\") %>% style(textposition = \"top right\") %>% layout(height = 600, width = 700)\n})\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"form-group shiny-input-container\">\n<label class=\"control-label\" id=\"input_weather-label\" for=\"input_weather\">\n<h4>Cities with most number of days of</h4>\n</label>\n<div>\n<select id=\"input_weather\" class=\"form-control\"><option value=\"Dust\">Dust</option>\n<option value=\"Sunny\">Sunny</option>\n<option value=\"Mostly Cloudy\">Mostly Cloudy</option>\n<option value=\"Snow\">Snow</option>\n<option value=\"Partly Cloudy\">Partly Cloudy</option>\n<option value=\"Rain\" selected>Rain</option>\n<option value=\"Rain Showers\">Rain Showers</option>\n<option value=\"Cloudy\">Cloudy</option>\n<option value=\"Freezing Drizzle\">Freezing Drizzle</option>\n<option value=\"Fog\">Fog</option>\n<option value=\"Windy\">Windy</option>\n<option value=\"Snow Showers\">Snow Showers</option>\n<option value=\"Rain and Snow\">Rain and Snow</option>\n<option value=\"Sleet\">Sleet</option>\n<option value=\"Very Cold\">Very Cold</option>\n<option value=\"Freezing Rain\">Freezing Rain</option>\n<option value=\"Thunderstorms\">Thunderstorms</option>\n<option value=\"Blizzard\">Blizzard</option>\n<option value=\"Snow Flurries\">Snow Flurries</option>\n<option value=\"Blowing Snow\">Blowing Snow</option>\n<option value=\"Drizzle\">Drizzle</option>\n<option value=\"Very Hot\">Very Hot</option>\n<option value=\"Smoke\">Smoke</option></select>\n<script type=\"application/json\" data-for=\"input_weather\">{\"maxItems\":1,\"plugins\":[\"selectize-plugin-a11y\"]}</script>\n</div>\n</div>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"weatherplot\" style=\"width:100%; height:400px; \" class=\"plotly html-widget html-widget-output shiny-report-size shiny-report-theme\"></div>\n```\n:::\n:::\n\n::: {.cell context='server'}\n\n:::\n\n\n\n::: callout-tip\nYou can find my github code repository [here](https://github.com/deepshamenghani/tidytuesday/tree/master/2022/Week_51_Weather_forecast_accuracy). Follow me on [medium](https://medium.com/@menghani.deepsha) and [linkedIn](www.linkedin.com/in/deepshamenghani) to stay tuned for my next article.\n:::\n\npreserve301504db71e2ca33\npreservef38cb8c4cd75cf1e\npreservecd8d78711b4e6722\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"selectize\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"0.12.4\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"www/shared/selectize\"]}]},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"js/selectize.min.js\",\"accessibility/js/selectize-plugin-a11y.min.js\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"css/selectize.bootstrap3.css\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"shiny\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[true]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.7.2\"]}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"htmlwidgets\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.5.4\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"www\"]}]},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"htmlwidgets.js\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"htmlwidgets\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[true]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.5.4\"]}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"plotly-binding\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.10.0\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"htmlwidgets\"]}]},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"plotly.js\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"plotly\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[false]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.10.0\"]}]}]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"assertthat\",\"backports\",\"base\",\"bit\",\"bit64\",\"broom\",\"bslib\",\"cachem\",\"cellranger\",\"cli\",\"colorspace\",\"compiler\",\"crayon\",\"curl\",\"data.table\",\"datasets\",\"DBI\",\"dbplyr\",\"digest\",\"dplyr\",\"DT\",\"ellipsis\",\"evaluate\",\"fansi\",\"fastmap\",\"forcats\",\"fs\",\"gargle\",\"generics\",\"ggplot2\",\"glue\",\"googledrive\",\"googlesheets4\",\"graphics\",\"grDevices\",\"grid\",\"gtable\",\"haven\",\"hms\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"httr\",\"jquerylib\",\"jsonlite\",\"knitr\",\"later\",\"lazyeval\",\"lifecycle\",\"lubridate\",\"magrittr\",\"memoise\",\"methods\",\"mime\",\"modelr\",\"munsell\",\"parallel\",\"pillar\",\"pkgconfig\",\"plotly\",\"promises\",\"purrr\",\"R6\",\"Rcpp\",\"readr\",\"readxl\",\"reprex\",\"rlang\",\"rmarkdown\",\"rstudioapi\",\"rvest\",\"sass\",\"scales\",\"shiny\",\"stats\",\"stringi\",\"stringr\",\"tibble\",\"tidyr\",\"tidyselect\",\"tidytuesdayR\",\"tidyverse\",\"tools\",\"tzdb\",\"usethis\",\"usmap\",\"utf8\",\"utils\",\"vctrs\",\"viridisLite\",\"vroom\",\"withr\",\"xfun\",\"xml2\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"0.2.1\",\"1.4.1\",\"4.2.1\",\"4.0.4\",\"4.0.5\",\"1.0.1\",\"0.4.0\",\"1.0.6\",\"1.1.0\",\"3.4.0\",\"2.0-3\",\"4.2.1\",\"1.5.1\",\"4.3.2\",\"1.14.2\",\"4.2.1\",\"1.1.3\",\"2.2.1\",\"0.6.29\",\"1.0.10\",\"0.25\",\"0.3.2\",\"0.16\",\"1.0.3\",\"1.1.0\",\"0.5.2\",\"1.5.2\",\"1.2.1\",\"0.1.3\",\"3.3.6\",\"1.6.2\",\"2.0.0\",\"1.0.1\",\"4.2.1\",\"4.2.1\",\"4.2.1\",\"0.3.1\",\"2.5.1\",\"1.1.2\",\"0.5.3\",\"1.5.4\",\"1.6.6\",\"1.4.4\",\"0.1.4\",\"1.8.2\",\"1.40\",\"1.3.0\",\"0.2.2\",\"1.0.2\",\"1.8.0\",\"2.0.3\",\"2.0.1\",\"4.2.1\",\"0.12\",\"0.1.9\",\"0.5.0\",\"4.2.1\",\"1.8.1\",\"2.0.3\",\"4.10.0\",\"1.2.0.1\",\"0.3.4\",\"2.5.1\",\"1.0.9\",\"2.1.2\",\"1.4.1\",\"2.0.2\",\"1.0.5\",\"2.19\",\"0.14\",\"1.0.3\",\"0.4.2\",\"1.2.1\",\"1.7.2\",\"4.2.1\",\"1.7.8\",\"1.4.1\",\"3.1.8\",\"1.2.1\",\"1.1.2\",\"1.0.2\",\"1.3.2\",\"4.2.1\",\"0.3.0\",\"2.1.6\",\"0.6.0\",\"1.2.2\",\"4.2.1\",\"0.4.1\",\"0.4.1\",\"1.5.7\",\"2.5.0\",\"0.32\",\"1.3.3\",\"1.8-4\",\"2.3.5\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve301504db71e2ca33": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-start\">\nknitr::opts_chunk$set(\n  echo = FALSE,\n  eval = TRUE,\n  message = FALSE,\n  warning = FALSE\n)\n</script>\n",
      "preservecd8d78711b4e6722": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n",
      "preservef38cb8c4cd75cf1e": "\n<script type=\"application/shiny-prerendered\" data-context=\"server\">\nlibrary(tidyverse)\nlibrary(rmarkdown)\nlibrary(plotly)\nlibrary(shiny)\nlibrary(usmap)\n\nweather_forecasts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/weather_forecasts.csv')\ncities <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/cities.csv')\noutlook_meanings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/outlook_meanings.csv')\n\nweather_counts <- eventReactive(\n  eventExpr = input$input_weather,\n  valueExpr = {\n      weather_forecasts %>% \n      filter(forecast_hours_before == 12) %>%\n      left_join(outlook_meanings) %>% \n      filter(meaning == input$input_weather) %>%\n      count(state, city, forecast_outlook) %>% \n      mutate(label = paste0(city,\"\\n\",state, \"\\n\",n)) %>% \n      group_by(state) %>% \n      arrange(desc(n)) %>% \n      filter(row_number() == 1) %>%  \n      ungroup() %>%  \n      left_join(cities %>% select(city,state, lat, lon)) %>%\n      mutate(Region = case_when(state %in% (usmap::.northeast_region) ~ \"Northeast\",\n                                state %in% (usmap::.north_central_region) ~ \"NorthCentral\",\n                                state %in% (usmap::.midwest_region) ~ \"Midwest\",\n                                state %in% (usmap::.south_region) ~ \"South\",\n                                state %in% (usmap::.west_region) ~ \"West\",\n                                TRUE ~ \"Other\")) %>% \n      filter(Region == \"West\") %>%\n      filter(!is.na(lat)) %>% \n      usmap_transform() \n  },\n  ignoreNULL = FALSE\n)\n\noutput$weatherplot <- renderPlotly({\n    g <- plot_usmap(fill = \"#008080\", include = .west_region, alpha = 0.2, color = \"#2c3e50\" ) +\n      geom_point(data = weather_counts(),\n             aes(x = x, y = y, text=label),\n             color = \"darkblue\", alpha = 0.5) +\n      geom_text(data = weather_counts(),\n                            aes(x = x, y = y, label = city),\n                            size = 4, alpha = 0.8) +\n  labs(title = paste0(\"City with most number of days with \", input$input_weather))\n    ggplotly(g, tooltip = \"text\") %>% style(textposition = \"top right\") %>% layout(height = 600, width = 700)\n})\n</script>\n"
    },
    "postProcess": true
  }
}