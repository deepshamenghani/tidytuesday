---
title: "Week9"
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.


```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  message = FALSE,
  warning = FALSE
)
```

In this post, I will analyse the [#TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-02-28/readme.md) African Language Sentiment data set.

The data comes from [AfriSenti: Sentiment Analysis dataset for 14 African languages](https://github.com/afrisenti-semeval/afrisent-semeval-2023) via [\@shmuhammad2004](https://github.com/shmuhammad2004) (the corresponding author on the [associated paper](https://arxiv.org/pdf/2302.08956.pdf), and an active member of the [R4DS Online Learning Community Slack](https://r4ds.io/join)).

::: callout-tip
You can find my github code repository [here](https://github.com/deepshamenghani/tidytuesday/tree/master/2023/Week9_Languages).
:::

## Load libraries

```{r install packages, message=FALSE, warning=FALSE, include=TRUE, paged.print=FALSE, eval=TRUE, echo=TRUE}

# For loading Tidy Tuesday data
library(tidytuesdayR)

# EDA
library(tidyverse)
library(highcharter)

# Shiny in md
library(rmarkdown)
library(shiny)
library(shinyWidgets)

library(htmltools)
library(htmlwidgets)

```

## Load data

```{r}
afrisenti <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-28/afrisenti.csv')
languages <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-28/languages.csv')
language_scripts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-28/language_scripts.csv')
language_countries <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-28/language_countries.csv')
country_regions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-28/country_regions.csv')

```

## Data editing

```{r}
language_count = afrisenti |> 
  count(language_iso_code, label) |> 
  group_by(language_iso_code) |> 
  mutate(perc = (n/sum(n))*100) |> 
  ungroup() |> 
  select(-n) 

language_countries_comb <- language_countries |> 
  group_by(language_iso_code) |> 
  summarise(countrylist = paste(country, collapse = ", "),
            countrycount = n_distinct(country)) |> 
  ungroup()

color_df <- data.frame(label = c("positive", "neutral", "negative"), colorvalue = c("#007A4D", "#FFB612", "#DE3831")) 

language_perc <- language_count |> 
  left_join(language_countries_comb) |> 
  left_join(languages) |> 
  left_join(color_df)
```


```{r eval=FALSE}
saveRDS(language_perc, "./data/language_perc.rds")
```

## Highcharter plot function

```{r eval=TRUE}
highcharter_plot_func <- function(data) {
  data |> 
    hchart(type = "column", hcaes(x = language, y = perc, color = colorvalue))  |> 
    hc_plotOptions(column = list(stacking = "normal")) |> 
    hc_yAxis(max = 100, min = 0, labels = list(format = "{value}%"),
                showFirstLabel = FALSE, title = "") |> 
    hc_tooltip(
      useHTML = TRUE,                              
      formatter = JS(
        "
        function(){
          outHTML = '<b>' + this.point.language + '<br>' + this.point.countrylist + '<br>' + this.point.label + '<br>' + Math.round(this.y) + '%'
          return(outHTML)
        }
  
        "
      ),
      shape = "callout", 
      borderWidth = 0 
    ) |> 
    hc_xAxis(
      title = ""
    )
}

highcharter_plot_func(language_perc)

```



